/*************************************************************

    Following is the Binary Tree node structure

    template <typename T>

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
            {
                delete left;
            }
            if (right)
            {
                delete right;
            }
        }
    };

*************************************************************/

int pre(BinaryTreeNode<int>* root, int key)
{
   BinaryTreeNode<int>* p=NULL,*curr=root;
    while(curr)
    {
        if(curr->data<key)
        {
            p=curr;
            curr=curr->right;
        }
        else 
        curr=curr->left;
    }
    if(p==NULL)
    return -1;
    return p->data;
}

int suc(BinaryTreeNode<int>* root, int key)
{
    BinaryTreeNode<int>*p=NULL,*curr=root;
    while(curr)
    {
        if(curr->data>key)
        {
            p=curr;
            curr=curr->left;
        }
        else
        curr=curr->right;
    }
    if(p==NULL)
    return -1;
    return p->data;
}
pair<int,int> predecessorSuccessor(BinaryTreeNode<int>* root, int key)
{
   pair<int,int>p;
   p.first=pre(root,key);
   p.second=suc(root,key);
   return p;
}
