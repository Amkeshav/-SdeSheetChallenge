/**********************************************************

    Following is the Binary Tree Node structure:

    template <typename T>
    class BinaryTreeNode {
        public: 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }

        ~BinaryTreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };
***********************************************************/
#include<bits/stdc++.h>
bool fun(BinaryTreeNode<int>* &root, int k, unordered_set<int>& s)
{
    if(root==NULL)
    return false;
    bool l=fun(root->left,k,s);
    if(!l){
    if(s.find(k-root->data)!=s.end())
    return true;
    else
    s.insert(root->data);
    }
    bool r=false;
    if(!l)
    r=fun(root->right,k,s);
    if(l || r)
    return true;
    return false;
}

bool pairSumBst(BinaryTreeNode<int> *root, int k)
{
    unordered_set<int>s;
    return fun(root,k,s);
}
